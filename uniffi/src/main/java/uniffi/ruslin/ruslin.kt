// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package uniffi.ruslin

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the detils of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Library
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.ptr.ByReference
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.atomic.AtomicLong

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    @JvmField var capacity: Int = 0

    @JvmField var len: Int = 0

    @JvmField var data: Pointer? = null

    class ByValue : RustBuffer(), Structure.ByValue
    class ByReference : RustBuffer(), Structure.ByReference

    companion object {
        internal fun alloc(size: Int = 0) = rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_ruslin_894c_rustbuffer_alloc(size, status).also {
                if (it.data == null) {
                    throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=$size)")
                }
            }
        }

        internal fun free(buf: RustBuffer.ByValue) = rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_ruslin_894c_rustbuffer_free(buf, status)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

/**
 * The equivalent of the `*mut RustBuffer` type.
 * Required for callbacks taking in an out pointer.
 *
 * Size is the sum of all values in the struct.
 */
class RustBufferByReference : ByReference(16) {
    /**
     * Set the pointed-to `RustBuffer` to the given value.
     */
    fun setValue(value: RustBuffer.ByValue) {
        // NOTE: The offsets are as they are in the C-like struct.
        val pointer = getPointer()
        pointer.setInt(0, value.capacity)
        pointer.setInt(4, value.len)
        pointer.setPointer(8, value.data)
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0

    @JvmField var data: Pointer? = null

    class ByValue : ForeignBytes(), Structure.ByValue
}

// The FfiConverter interface handles converter types to and from the FFI
//
// All implementing objects should be public to support external types.  When a
// type is external we need to import it's FfiConverter.
public interface FfiConverter<KotlinType, FfiType> {
    // Convert an FFI type to a Kotlin type
    fun lift(value: FfiType): KotlinType

    // Convert an Kotlin type to an FFI type
    fun lower(value: KotlinType): FfiType

    // Read a Kotlin type from a `ByteBuffer`
    fun read(buf: ByteBuffer): KotlinType

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    fun allocationSize(value: KotlinType): Int

    // Write a Kotlin type to a `ByteBuffer`
    fun write(value: KotlinType, buf: ByteBuffer)

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    fun lowerIntoRustBuffer(value: KotlinType): RustBuffer.ByValue {
        val rbuf = RustBuffer.alloc(allocationSize(value))
        try {
            val bbuf = rbuf.data!!.getByteBuffer(0, rbuf.capacity.toLong()).also {
                it.order(ByteOrder.BIG_ENDIAN)
            }
            write(value, bbuf)
            rbuf.writeField("len", bbuf.position())
            return rbuf
        } catch (e: Throwable) {
            RustBuffer.free(rbuf)
            throw e
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    fun liftFromRustBuffer(rbuf: RustBuffer.ByValue): KotlinType {
        val byteBuf = rbuf.asByteBuffer()!!
        try {
            val item = read(byteBuf)
            if (byteBuf.hasRemaining()) {
                throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
            }
            return item
        } finally {
            RustBuffer.free(rbuf)
        }
    }
}

// FfiConverter that uses `RustBuffer` as the FfiType
public interface FfiConverterRustBuffer<KotlinType> : FfiConverter<KotlinType, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue) = liftFromRustBuffer(value)
    override fun lower(value: KotlinType) = lowerIntoRustBuffer(value)
}

// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.
// Error runtime.
@Structure.FieldOrder("code", "error_buf")
internal open class RustCallStatus : Structure() {
    @JvmField var code: Int = 0

    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    fun isSuccess(): Boolean {
        return code == 0
    }

    fun isError(): Boolean {
        return code == 1
    }

    fun isPanic(): Boolean {
        return code == 2
    }
}

class InternalException(message: String) : Exception(message)

// Each top-level error class has a companion object that can lift the error from the call status's rust buffer
interface CallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E : Exception> rustCallWithError(errorHandler: CallStatusErrorHandler<E>, callback: (RustCallStatus) -> U): U {
    var status = RustCallStatus()
    val return_value = callback(status)
    if (status.isSuccess()) {
        return return_value
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

// CallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
object NullCallStatusErrorHandler : CallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> rustCall(callback: (RustCallStatus) -> U): U {
    return rustCallWithError(NullCallStatusErrorHandler, callback)
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "uniffi_ruslin"
}

private inline fun <reified Lib : Library> loadIndirect(
    componentName: String,
): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.

internal interface _UniFFILib : Library {
    companion object {
        internal val INSTANCE: _UniFFILib by lazy {
            loadIndirect<_UniFFILib>(componentName = "ruslin")
        }
    }

    fun ffi_ruslin_894c_RuslinAndroidData_object_free(
        `ptr`: Pointer,
        _uniffi_out_err: RustCallStatus,
    ): Unit

    fun ruslin_894c_RuslinAndroidData_new(
        `dataDir`: RustBuffer.ByValue,
        `resourceDir`: RustBuffer.ByValue,
        `logTextFile`: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus,
    ): Pointer

    fun ruslin_894c_RuslinAndroidData_sync_config_exists(
        `ptr`: Pointer,
        _uniffi_out_err: RustCallStatus,
    ): Byte

    fun ruslin_894c_RuslinAndroidData_save_sync_config(
        `ptr`: Pointer,
        `config`: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus,
    ): Unit

    fun ruslin_894c_RuslinAndroidData_get_sync_config(
        `ptr`: Pointer,
        _uniffi_out_err: RustCallStatus,
    ): RustBuffer.ByValue

    fun ruslin_894c_RuslinAndroidData_sync(
        `ptr`: Pointer,
        _uniffi_out_err: RustCallStatus,
    ): RustBuffer.ByValue

    fun ruslin_894c_RuslinAndroidData_new_folder(
        `ptr`: Pointer,
        `parentId`: RustBuffer.ByValue,
        `title`: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus,
    ): RustBuffer.ByValue

    fun ruslin_894c_RuslinAndroidData_replace_folder(
        `ptr`: Pointer,
        `folder`: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus,
    ): Unit

    fun ruslin_894c_RuslinAndroidData_load_folders(
        `ptr`: Pointer,
        _uniffi_out_err: RustCallStatus,
    ): RustBuffer.ByValue

    fun ruslin_894c_RuslinAndroidData_delete_folder(
        `ptr`: Pointer,
        `id`: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus,
    ): Unit

    fun ruslin_894c_RuslinAndroidData_load_abbr_notes(
        `ptr`: Pointer,
        `parentId`: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus,
    ): RustBuffer.ByValue

    fun ruslin_894c_RuslinAndroidData_new_note(
        `ptr`: Pointer,
        `parentId`: RustBuffer.ByValue,
        `title`: RustBuffer.ByValue,
        `body`: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus,
    ): RustBuffer.ByValue

    fun ruslin_894c_RuslinAndroidData_load_note(
        `ptr`: Pointer,
        `id`: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus,
    ): RustBuffer.ByValue

    fun ruslin_894c_RuslinAndroidData_replace_note(
        `ptr`: Pointer,
        `note`: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus,
    ): Unit

    fun ruslin_894c_RuslinAndroidData_delete_note(
        `ptr`: Pointer,
        `id`: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus,
    ): Unit

    fun ruslin_894c_RuslinAndroidData_conflict_note_exists(
        `ptr`: Pointer,
        _uniffi_out_err: RustCallStatus,
    ): Byte

    fun ruslin_894c_RuslinAndroidData_load_abbr_conflict_notes(
        `ptr`: Pointer,
        _uniffi_out_err: RustCallStatus,
    ): RustBuffer.ByValue

    fun ruslin_894c_RuslinAndroidData_database_status(
        `ptr`: Pointer,
        _uniffi_out_err: RustCallStatus,
    ): RustBuffer.ByValue

    fun ruslin_894c_RuslinAndroidData_search(
        `ptr`: Pointer,
        `searchTerm`: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus,
    ): RustBuffer.ByValue

    fun ruslin_894c_RuslinAndroidData_create_resource(
        `ptr`: Pointer,
        `title`: RustBuffer.ByValue,
        `mime`: RustBuffer.ByValue,
        `fileExtension`: RustBuffer.ByValue,
        `size`: Int,
        _uniffi_out_err: RustCallStatus,
    ): RustBuffer.ByValue

    fun ruslin_894c_RuslinAndroidData_save_resource(
        `ptr`: Pointer,
        `resource`: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus,
    ): Unit

    fun ruslin_894c_parse_markdown(
        `text`: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus,
    ): RustBuffer.ByValue

    fun ffi_ruslin_894c_rustbuffer_alloc(
        `size`: Int,
        _uniffi_out_err: RustCallStatus,
    ): RustBuffer.ByValue

    fun ffi_ruslin_894c_rustbuffer_from_bytes(
        `bytes`: ForeignBytes.ByValue,
        _uniffi_out_err: RustCallStatus,
    ): RustBuffer.ByValue

    fun ffi_ruslin_894c_rustbuffer_free(
        `buf`: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus,
    ): Unit

    fun ffi_ruslin_894c_rustbuffer_reserve(
        `buf`: RustBuffer.ByValue,
        `additional`: Int,
        _uniffi_out_err: RustCallStatus,
    ): RustBuffer.ByValue
}

// Public interface members begin here.

public object FfiConverterInt : FfiConverter<Int, Int> {
    override fun lift(value: Int): Int {
        return value
    }

    override fun read(buf: ByteBuffer): Int {
        return buf.getInt()
    }

    override fun lower(value: Int): Int {
        return value
    }

    override fun allocationSize(value: Int) = 4

    override fun write(value: Int, buf: ByteBuffer) {
        buf.putInt(value)
    }
}

public object FfiConverterLong : FfiConverter<Long, Long> {
    override fun lift(value: Long): Long {
        return value
    }

    override fun read(buf: ByteBuffer): Long {
        return buf.getLong()
    }

    override fun lower(value: Long): Long {
        return value
    }

    override fun allocationSize(value: Long) = 8

    override fun write(value: Long, buf: ByteBuffer) {
        buf.putLong(value)
    }
}

public object FfiConverterDouble : FfiConverter<Double, Double> {
    override fun lift(value: Double): Double {
        return value
    }

    override fun read(buf: ByteBuffer): Double {
        return buf.getDouble()
    }

    override fun lower(value: Double): Double {
        return value
    }

    override fun allocationSize(value: Double) = 8

    override fun write(value: Double, buf: ByteBuffer) {
        buf.putDouble(value)
    }
}

public object FfiConverterBoolean : FfiConverter<Boolean, Byte> {
    override fun lift(value: Byte): Boolean {
        return value.toInt() != 0
    }

    override fun read(buf: ByteBuffer): Boolean {
        return lift(buf.get())
    }

    override fun lower(value: Boolean): Byte {
        return if (value) 1.toByte() else 0.toByte()
    }

    override fun allocationSize(value: Boolean) = 1

    override fun write(value: Boolean, buf: ByteBuffer) {
        buf.put(lower(value))
    }
}

public object FfiConverterString : FfiConverter<String, RustBuffer.ByValue> {
    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    override fun lift(value: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(value.len)
            value.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(value)
        }
    }

    override fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    override fun lower(value: String): RustBuffer.ByValue {
        val byteArr = value.toByteArray(Charsets.UTF_8)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteArr.size)
        rbuf.asByteBuffer()!!.put(byteArr)
        return rbuf
    }

    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per unicode codepoint which will always be
    // enough.
    override fun allocationSize(value: String): Int {
        val sizeForLength = 4
        val sizeForString = value.length * 3
        return sizeForLength + sizeForString
    }

    override fun write(value: String, buf: ByteBuffer) {
        val byteArr = value.toByteArray(Charsets.UTF_8)
        buf.putInt(byteArr.size)
        buf.put(byteArr)
    }
}

// Interface implemented by anything that can contain an object reference.
//
// Such types expose a `destroy()` method that must be called to cleanly
// dispose of the contained objects. Failure to call this method may result
// in memory leaks.
//
// The easiest way to ensure this method is called is to use the `.use`
// helper method to execute a block and destroy the object at the end.
interface Disposable {
    fun destroy()
    companion object {
        fun destroy(vararg args: Any?) {
            args.filterIsInstance<Disposable>()
                .forEach(Disposable::destroy)
        }
    }
}

inline fun <T : Disposable?, R> T.use(block: (T) -> R) =
    try {
        block(this)
    } finally {
        try {
            // N.B. our implementation is on the nullable type `Disposable?`.
            this?.destroy()
        } catch (e: Throwable) {
            // swallow
        }
    }

// The base class for all UniFFI Object types.
//
// This class provides core operations for working with the Rust `Arc<T>` pointer to
// the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// the Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each `FFIObject` instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an `FFIObject` is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an `FFIObject` instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so will
//     leak the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each `FFIObject` an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// In the future we may be able to replace some of this with automatic finalization logic, such as using
// the new "Cleaner" functionaility in Java 9. The above scheme has been designed to work even if `destroy` is
// invoked by garbage-collection machinery rather than by calling code (which by the way, it's apparently also
// possible for the JVM to finalize an object while there is an in-flight call to one of its methods [1],
// so there would still be some complexity here).
//
// Sigh...all of this for want of a robust finalization mechanism.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//
abstract class FFIObject(
    protected val pointer: Pointer,
) : Disposable, AutoCloseable {

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    protected open fun freeRustArcPtr() {
        // To be overridden in subclasses.
    }

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                this.freeRustArcPtr()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (!this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.pointer)
        } finally {
            // This decrement aways matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                this.freeRustArcPtr()
            }
        }
    }
}

public interface RuslinAndroidDataInterface {

    fun `syncConfigExists`(): Boolean

    @Throws(SyncException::class)
    fun `saveSyncConfig`(`config`: SyncConfig)

    @Throws(SyncException::class)
    fun `getSyncConfig`(): SyncConfig?

    @Throws(SyncException::class)
    fun `sync`(): FfiSyncInfo

    fun `newFolder`(`parentId`: String?, `title`: String): FfiFolder

    @Throws(DatabaseException::class)
    fun `replaceFolder`(`folder`: FfiFolder)

    @Throws(DatabaseException::class)
    fun `loadFolders`(): List<FfiFolder>

    @Throws(DatabaseException::class)
    fun `deleteFolder`(`id`: String)

    @Throws(DatabaseException::class)
    fun `loadAbbrNotes`(`parentId`: String?): List<FfiAbbrNote>

    fun `newNote`(`parentId`: String?, `title`: String, `body`: String): FfiNote

    @Throws(DatabaseException::class)
    fun `loadNote`(`id`: String): FfiNote

    @Throws(DatabaseException::class)
    fun `replaceNote`(`note`: FfiNote)

    @Throws(DatabaseException::class)
    fun `deleteNote`(`id`: String)

    @Throws(DatabaseException::class)
    fun `conflictNoteExists`(): Boolean

    @Throws(DatabaseException::class)
    fun `loadAbbrConflictNotes`(): List<FfiAbbrNote>

    @Throws(DatabaseException::class)
    fun `databaseStatus`(): FfiStatus

    @Throws(DatabaseException::class)
    fun `search`(`searchTerm`: String): List<FfiSearchNote>

    fun `createResource`(`title`: String, `mime`: String, `fileExtension`: String, `size`: Int): FfiResource

    @Throws(DatabaseException::class)
    fun `saveResource`(`resource`: FfiResource)
}

class RuslinAndroidData(
    pointer: Pointer,
) : FFIObject(pointer), RuslinAndroidDataInterface {
    constructor(`dataDir`: String, `resourceDir`: String, `logTextFile`: String) :
        this(
            rustCallWithError(SyncException) { _status ->
                _UniFFILib.INSTANCE.ruslin_894c_RuslinAndroidData_new(FfiConverterString.lower(`dataDir`), FfiConverterString.lower(`resourceDir`), FfiConverterString.lower(`logTextFile`), _status)
            },
        )

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    protected override fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_ruslin_894c_RuslinAndroidData_object_free(this.pointer, status)
        }
    }

    override fun `syncConfigExists`(): Boolean =
        callWithPointer {
            rustCall() { _status ->
                _UniFFILib.INSTANCE.ruslin_894c_RuslinAndroidData_sync_config_exists(it, _status)
            }
        }.let {
            FfiConverterBoolean.lift(it)
        }

    @Throws(SyncException::class)
    override fun `saveSyncConfig`(`config`: SyncConfig) =
        callWithPointer {
            rustCallWithError(SyncException) { _status ->
                _UniFFILib.INSTANCE.ruslin_894c_RuslinAndroidData_save_sync_config(it, FfiConverterTypeSyncConfig.lower(`config`), _status)
            }
        }

    @Throws(SyncException::class)
    override fun `getSyncConfig`(): SyncConfig? =
        callWithPointer {
            rustCallWithError(SyncException) { _status ->
                _UniFFILib.INSTANCE.ruslin_894c_RuslinAndroidData_get_sync_config(it, _status)
            }
        }.let {
            FfiConverterOptionalTypeSyncConfig.lift(it)
        }

    @Throws(SyncException::class)
    override fun `sync`(): FfiSyncInfo =
        callWithPointer {
            rustCallWithError(SyncException) { _status ->
                _UniFFILib.INSTANCE.ruslin_894c_RuslinAndroidData_sync(it, _status)
            }
        }.let {
            FfiConverterTypeFfiSyncInfo.lift(it)
        }
    override fun `newFolder`(`parentId`: String?, `title`: String): FfiFolder =
        callWithPointer {
            rustCall() { _status ->
                _UniFFILib.INSTANCE.ruslin_894c_RuslinAndroidData_new_folder(it, FfiConverterOptionalString.lower(`parentId`), FfiConverterString.lower(`title`), _status)
            }
        }.let {
            FfiConverterTypeFfiFolder.lift(it)
        }

    @Throws(DatabaseException::class)
    override fun `replaceFolder`(`folder`: FfiFolder) =
        callWithPointer {
            rustCallWithError(DatabaseException) { _status ->
                _UniFFILib.INSTANCE.ruslin_894c_RuslinAndroidData_replace_folder(it, FfiConverterTypeFfiFolder.lower(`folder`), _status)
            }
        }

    @Throws(DatabaseException::class)
    override fun `loadFolders`(): List<FfiFolder> =
        callWithPointer {
            rustCallWithError(DatabaseException) { _status ->
                _UniFFILib.INSTANCE.ruslin_894c_RuslinAndroidData_load_folders(it, _status)
            }
        }.let {
            FfiConverterSequenceTypeFfiFolder.lift(it)
        }

    @Throws(DatabaseException::class)
    override fun `deleteFolder`(`id`: String) =
        callWithPointer {
            rustCallWithError(DatabaseException) { _status ->
                _UniFFILib.INSTANCE.ruslin_894c_RuslinAndroidData_delete_folder(it, FfiConverterString.lower(`id`), _status)
            }
        }

    @Throws(DatabaseException::class)
    override fun `loadAbbrNotes`(`parentId`: String?): List<FfiAbbrNote> =
        callWithPointer {
            rustCallWithError(DatabaseException) { _status ->
                _UniFFILib.INSTANCE.ruslin_894c_RuslinAndroidData_load_abbr_notes(it, FfiConverterOptionalString.lower(`parentId`), _status)
            }
        }.let {
            FfiConverterSequenceTypeFfiAbbrNote.lift(it)
        }
    override fun `newNote`(`parentId`: String?, `title`: String, `body`: String): FfiNote =
        callWithPointer {
            rustCall() { _status ->
                _UniFFILib.INSTANCE.ruslin_894c_RuslinAndroidData_new_note(it, FfiConverterOptionalString.lower(`parentId`), FfiConverterString.lower(`title`), FfiConverterString.lower(`body`), _status)
            }
        }.let {
            FfiConverterTypeFfiNote.lift(it)
        }

    @Throws(DatabaseException::class)
    override fun `loadNote`(`id`: String): FfiNote =
        callWithPointer {
            rustCallWithError(DatabaseException) { _status ->
                _UniFFILib.INSTANCE.ruslin_894c_RuslinAndroidData_load_note(it, FfiConverterString.lower(`id`), _status)
            }
        }.let {
            FfiConverterTypeFfiNote.lift(it)
        }

    @Throws(DatabaseException::class)
    override fun `replaceNote`(`note`: FfiNote) =
        callWithPointer {
            rustCallWithError(DatabaseException) { _status ->
                _UniFFILib.INSTANCE.ruslin_894c_RuslinAndroidData_replace_note(it, FfiConverterTypeFfiNote.lower(`note`), _status)
            }
        }

    @Throws(DatabaseException::class)
    override fun `deleteNote`(`id`: String) =
        callWithPointer {
            rustCallWithError(DatabaseException) { _status ->
                _UniFFILib.INSTANCE.ruslin_894c_RuslinAndroidData_delete_note(it, FfiConverterString.lower(`id`), _status)
            }
        }

    @Throws(DatabaseException::class)
    override fun `conflictNoteExists`(): Boolean =
        callWithPointer {
            rustCallWithError(DatabaseException) { _status ->
                _UniFFILib.INSTANCE.ruslin_894c_RuslinAndroidData_conflict_note_exists(it, _status)
            }
        }.let {
            FfiConverterBoolean.lift(it)
        }

    @Throws(DatabaseException::class)
    override fun `loadAbbrConflictNotes`(): List<FfiAbbrNote> =
        callWithPointer {
            rustCallWithError(DatabaseException) { _status ->
                _UniFFILib.INSTANCE.ruslin_894c_RuslinAndroidData_load_abbr_conflict_notes(it, _status)
            }
        }.let {
            FfiConverterSequenceTypeFfiAbbrNote.lift(it)
        }

    @Throws(DatabaseException::class)
    override fun `databaseStatus`(): FfiStatus =
        callWithPointer {
            rustCallWithError(DatabaseException) { _status ->
                _UniFFILib.INSTANCE.ruslin_894c_RuslinAndroidData_database_status(it, _status)
            }
        }.let {
            FfiConverterTypeFfiStatus.lift(it)
        }

    @Throws(DatabaseException::class)
    override fun `search`(`searchTerm`: String): List<FfiSearchNote> =
        callWithPointer {
            rustCallWithError(DatabaseException) { _status ->
                _UniFFILib.INSTANCE.ruslin_894c_RuslinAndroidData_search(it, FfiConverterString.lower(`searchTerm`), _status)
            }
        }.let {
            FfiConverterSequenceTypeFfiSearchNote.lift(it)
        }
    override fun `createResource`(`title`: String, `mime`: String, `fileExtension`: String, `size`: Int): FfiResource =
        callWithPointer {
            rustCall() { _status ->
                _UniFFILib.INSTANCE.ruslin_894c_RuslinAndroidData_create_resource(it, FfiConverterString.lower(`title`), FfiConverterString.lower(`mime`), FfiConverterString.lower(`fileExtension`), FfiConverterInt.lower(`size`), _status)
            }
        }.let {
            FfiConverterTypeFfiResource.lift(it)
        }

    @Throws(DatabaseException::class)
    override fun `saveResource`(`resource`: FfiResource) =
        callWithPointer {
            rustCallWithError(DatabaseException) { _status ->
                _UniFFILib.INSTANCE.ruslin_894c_RuslinAndroidData_save_resource(it, FfiConverterTypeFfiResource.lower(`resource`), _status)
            }
        }
}

public object FfiConverterTypeRuslinAndroidData : FfiConverter<RuslinAndroidData, Pointer> {
    override fun lower(value: RuslinAndroidData): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): RuslinAndroidData {
        return RuslinAndroidData(value)
    }

    override fun read(buf: ByteBuffer): RuslinAndroidData {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: RuslinAndroidData) = 8

    override fun write(value: RuslinAndroidData, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}

data class FfiAbbrNote(
    var `id`: String,
    var `parentId`: String?,
    var `title`: String,
    var `createdTime`: Long,
    var `updatedTime`: Long,
)

public object FfiConverterTypeFfiAbbrNote : FfiConverterRustBuffer<FfiAbbrNote> {
    override fun read(buf: ByteBuffer): FfiAbbrNote {
        return FfiAbbrNote(
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterLong.read(buf),
            FfiConverterLong.read(buf),
        )
    }

    override fun allocationSize(value: FfiAbbrNote) = (
        FfiConverterString.allocationSize(value.`id`) +
            FfiConverterOptionalString.allocationSize(value.`parentId`) +
            FfiConverterString.allocationSize(value.`title`) +
            FfiConverterLong.allocationSize(value.`createdTime`) +
            FfiConverterLong.allocationSize(value.`updatedTime`)
        )

    override fun write(value: FfiAbbrNote, buf: ByteBuffer) {
        FfiConverterString.write(value.`id`, buf)
        FfiConverterOptionalString.write(value.`parentId`, buf)
        FfiConverterString.write(value.`title`, buf)
        FfiConverterLong.write(value.`createdTime`, buf)
        FfiConverterLong.write(value.`updatedTime`, buf)
    }
}

data class FfiFolder(
    var `id`: String,
    var `title`: String,
    var `createdTime`: Long,
    var `updatedTime`: Long,
    var `userCreatedTime`: Long,
    var `userUpdatedTime`: Long,
    var `encryptionCipherText`: String,
    var `encryptionApplied`: Boolean,
    var `parentId`: String?,
    var `isShared`: Boolean,
    var `shareId`: String,
    var `masterKeyId`: String,
    var `icon`: String,
)

public object FfiConverterTypeFfiFolder : FfiConverterRustBuffer<FfiFolder> {
    override fun read(buf: ByteBuffer): FfiFolder {
        return FfiFolder(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterLong.read(buf),
            FfiConverterLong.read(buf),
            FfiConverterLong.read(buf),
            FfiConverterLong.read(buf),
            FfiConverterString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: FfiFolder) = (
        FfiConverterString.allocationSize(value.`id`) +
            FfiConverterString.allocationSize(value.`title`) +
            FfiConverterLong.allocationSize(value.`createdTime`) +
            FfiConverterLong.allocationSize(value.`updatedTime`) +
            FfiConverterLong.allocationSize(value.`userCreatedTime`) +
            FfiConverterLong.allocationSize(value.`userUpdatedTime`) +
            FfiConverterString.allocationSize(value.`encryptionCipherText`) +
            FfiConverterBoolean.allocationSize(value.`encryptionApplied`) +
            FfiConverterOptionalString.allocationSize(value.`parentId`) +
            FfiConverterBoolean.allocationSize(value.`isShared`) +
            FfiConverterString.allocationSize(value.`shareId`) +
            FfiConverterString.allocationSize(value.`masterKeyId`) +
            FfiConverterString.allocationSize(value.`icon`)
        )

    override fun write(value: FfiFolder, buf: ByteBuffer) {
        FfiConverterString.write(value.`id`, buf)
        FfiConverterString.write(value.`title`, buf)
        FfiConverterLong.write(value.`createdTime`, buf)
        FfiConverterLong.write(value.`updatedTime`, buf)
        FfiConverterLong.write(value.`userCreatedTime`, buf)
        FfiConverterLong.write(value.`userUpdatedTime`, buf)
        FfiConverterString.write(value.`encryptionCipherText`, buf)
        FfiConverterBoolean.write(value.`encryptionApplied`, buf)
        FfiConverterOptionalString.write(value.`parentId`, buf)
        FfiConverterBoolean.write(value.`isShared`, buf)
        FfiConverterString.write(value.`shareId`, buf)
        FfiConverterString.write(value.`masterKeyId`, buf)
        FfiConverterString.write(value.`icon`, buf)
    }
}

data class FfiNote(
    var `id`: String,
    var `parentId`: String?,
    var `title`: String,
    var `body`: String,
    var `createdTime`: Long,
    var `updatedTime`: Long,
    var `isConflict`: Boolean,
    var `latitude`: Double,
    var `longitude`: Double,
    var `altitude`: Double,
    var `author`: String,
    var `sourceUrl`: String,
    var `isTodo`: Boolean,
    var `todoDue`: Boolean,
    var `todoCompleted`: Boolean,
    var `source`: String,
    var `sourceApplication`: String,
    var `applicationData`: String,
    var `order`: Long,
    var `userCreatedTime`: Long,
    var `userUpdatedTime`: Long,
    var `encryptionCipherText`: String,
    var `encryptionApplied`: Boolean,
    var `markupLanguage`: Boolean,
    var `isShared`: Boolean,
    var `shareId`: String,
    var `conflictOriginalId`: String?,
    var `masterKeyId`: String,
)

public object FfiConverterTypeFfiNote : FfiConverterRustBuffer<FfiNote> {
    override fun read(buf: ByteBuffer): FfiNote {
        return FfiNote(
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterLong.read(buf),
            FfiConverterLong.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterDouble.read(buf),
            FfiConverterDouble.read(buf),
            FfiConverterDouble.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterLong.read(buf),
            FfiConverterLong.read(buf),
            FfiConverterLong.read(buf),
            FfiConverterString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: FfiNote) = (
        FfiConverterString.allocationSize(value.`id`) +
            FfiConverterOptionalString.allocationSize(value.`parentId`) +
            FfiConverterString.allocationSize(value.`title`) +
            FfiConverterString.allocationSize(value.`body`) +
            FfiConverterLong.allocationSize(value.`createdTime`) +
            FfiConverterLong.allocationSize(value.`updatedTime`) +
            FfiConverterBoolean.allocationSize(value.`isConflict`) +
            FfiConverterDouble.allocationSize(value.`latitude`) +
            FfiConverterDouble.allocationSize(value.`longitude`) +
            FfiConverterDouble.allocationSize(value.`altitude`) +
            FfiConverterString.allocationSize(value.`author`) +
            FfiConverterString.allocationSize(value.`sourceUrl`) +
            FfiConverterBoolean.allocationSize(value.`isTodo`) +
            FfiConverterBoolean.allocationSize(value.`todoDue`) +
            FfiConverterBoolean.allocationSize(value.`todoCompleted`) +
            FfiConverterString.allocationSize(value.`source`) +
            FfiConverterString.allocationSize(value.`sourceApplication`) +
            FfiConverterString.allocationSize(value.`applicationData`) +
            FfiConverterLong.allocationSize(value.`order`) +
            FfiConverterLong.allocationSize(value.`userCreatedTime`) +
            FfiConverterLong.allocationSize(value.`userUpdatedTime`) +
            FfiConverterString.allocationSize(value.`encryptionCipherText`) +
            FfiConverterBoolean.allocationSize(value.`encryptionApplied`) +
            FfiConverterBoolean.allocationSize(value.`markupLanguage`) +
            FfiConverterBoolean.allocationSize(value.`isShared`) +
            FfiConverterString.allocationSize(value.`shareId`) +
            FfiConverterOptionalString.allocationSize(value.`conflictOriginalId`) +
            FfiConverterString.allocationSize(value.`masterKeyId`)
        )

    override fun write(value: FfiNote, buf: ByteBuffer) {
        FfiConverterString.write(value.`id`, buf)
        FfiConverterOptionalString.write(value.`parentId`, buf)
        FfiConverterString.write(value.`title`, buf)
        FfiConverterString.write(value.`body`, buf)
        FfiConverterLong.write(value.`createdTime`, buf)
        FfiConverterLong.write(value.`updatedTime`, buf)
        FfiConverterBoolean.write(value.`isConflict`, buf)
        FfiConverterDouble.write(value.`latitude`, buf)
        FfiConverterDouble.write(value.`longitude`, buf)
        FfiConverterDouble.write(value.`altitude`, buf)
        FfiConverterString.write(value.`author`, buf)
        FfiConverterString.write(value.`sourceUrl`, buf)
        FfiConverterBoolean.write(value.`isTodo`, buf)
        FfiConverterBoolean.write(value.`todoDue`, buf)
        FfiConverterBoolean.write(value.`todoCompleted`, buf)
        FfiConverterString.write(value.`source`, buf)
        FfiConverterString.write(value.`sourceApplication`, buf)
        FfiConverterString.write(value.`applicationData`, buf)
        FfiConverterLong.write(value.`order`, buf)
        FfiConverterLong.write(value.`userCreatedTime`, buf)
        FfiConverterLong.write(value.`userUpdatedTime`, buf)
        FfiConverterString.write(value.`encryptionCipherText`, buf)
        FfiConverterBoolean.write(value.`encryptionApplied`, buf)
        FfiConverterBoolean.write(value.`markupLanguage`, buf)
        FfiConverterBoolean.write(value.`isShared`, buf)
        FfiConverterString.write(value.`shareId`, buf)
        FfiConverterOptionalString.write(value.`conflictOriginalId`, buf)
        FfiConverterString.write(value.`masterKeyId`, buf)
    }
}

data class FfiResource(
    var `id`: String,
    var `title`: String,
    var `mime`: String,
    var `filename`: String,
    var `createdTime`: Long,
    var `updatedTime`: Long,
    var `userCreatedTime`: Long,
    var `userUpdatedTime`: Long,
    var `fileExtension`: String,
    var `encryptionCipherText`: String,
    var `encryptionApplied`: Boolean,
    var `encryptionBlobEncrypted`: Boolean,
    var `size`: Int,
    var `isShared`: Boolean,
    var `shareId`: String,
    var `masterKeyId`: String,
)

public object FfiConverterTypeFfiResource : FfiConverterRustBuffer<FfiResource> {
    override fun read(buf: ByteBuffer): FfiResource {
        return FfiResource(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterLong.read(buf),
            FfiConverterLong.read(buf),
            FfiConverterLong.read(buf),
            FfiConverterLong.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterInt.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: FfiResource) = (
        FfiConverterString.allocationSize(value.`id`) +
            FfiConverterString.allocationSize(value.`title`) +
            FfiConverterString.allocationSize(value.`mime`) +
            FfiConverterString.allocationSize(value.`filename`) +
            FfiConverterLong.allocationSize(value.`createdTime`) +
            FfiConverterLong.allocationSize(value.`updatedTime`) +
            FfiConverterLong.allocationSize(value.`userCreatedTime`) +
            FfiConverterLong.allocationSize(value.`userUpdatedTime`) +
            FfiConverterString.allocationSize(value.`fileExtension`) +
            FfiConverterString.allocationSize(value.`encryptionCipherText`) +
            FfiConverterBoolean.allocationSize(value.`encryptionApplied`) +
            FfiConverterBoolean.allocationSize(value.`encryptionBlobEncrypted`) +
            FfiConverterInt.allocationSize(value.`size`) +
            FfiConverterBoolean.allocationSize(value.`isShared`) +
            FfiConverterString.allocationSize(value.`shareId`) +
            FfiConverterString.allocationSize(value.`masterKeyId`)
        )

    override fun write(value: FfiResource, buf: ByteBuffer) {
        FfiConverterString.write(value.`id`, buf)
        FfiConverterString.write(value.`title`, buf)
        FfiConverterString.write(value.`mime`, buf)
        FfiConverterString.write(value.`filename`, buf)
        FfiConverterLong.write(value.`createdTime`, buf)
        FfiConverterLong.write(value.`updatedTime`, buf)
        FfiConverterLong.write(value.`userCreatedTime`, buf)
        FfiConverterLong.write(value.`userUpdatedTime`, buf)
        FfiConverterString.write(value.`fileExtension`, buf)
        FfiConverterString.write(value.`encryptionCipherText`, buf)
        FfiConverterBoolean.write(value.`encryptionApplied`, buf)
        FfiConverterBoolean.write(value.`encryptionBlobEncrypted`, buf)
        FfiConverterInt.write(value.`size`, buf)
        FfiConverterBoolean.write(value.`isShared`, buf)
        FfiConverterString.write(value.`shareId`, buf)
        FfiConverterString.write(value.`masterKeyId`, buf)
    }
}

data class FfiSearchNote(
    var `id`: String,
    var `title`: String,
    var `body`: String,
)

public object FfiConverterTypeFfiSearchNote : FfiConverterRustBuffer<FfiSearchNote> {
    override fun read(buf: ByteBuffer): FfiSearchNote {
        return FfiSearchNote(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: FfiSearchNote) = (
        FfiConverterString.allocationSize(value.`id`) +
            FfiConverterString.allocationSize(value.`title`) +
            FfiConverterString.allocationSize(value.`body`)
        )

    override fun write(value: FfiSearchNote, buf: ByteBuffer) {
        FfiConverterString.write(value.`id`, buf)
        FfiConverterString.write(value.`title`, buf)
        FfiConverterString.write(value.`body`, buf)
    }
}

data class FfiStatus(
    var `noteCount`: Long,
    var `folderCount`: Long,
    var `resourceCount`: Long,
    var `tagCount`: Long,
    var `noteTagCount`: Long,
)

public object FfiConverterTypeFfiStatus : FfiConverterRustBuffer<FfiStatus> {
    override fun read(buf: ByteBuffer): FfiStatus {
        return FfiStatus(
            FfiConverterLong.read(buf),
            FfiConverterLong.read(buf),
            FfiConverterLong.read(buf),
            FfiConverterLong.read(buf),
            FfiConverterLong.read(buf),
        )
    }

    override fun allocationSize(value: FfiStatus) = (
        FfiConverterLong.allocationSize(value.`noteCount`) +
            FfiConverterLong.allocationSize(value.`folderCount`) +
            FfiConverterLong.allocationSize(value.`resourceCount`) +
            FfiConverterLong.allocationSize(value.`tagCount`) +
            FfiConverterLong.allocationSize(value.`noteTagCount`)
        )

    override fun write(value: FfiStatus, buf: ByteBuffer) {
        FfiConverterLong.write(value.`noteCount`, buf)
        FfiConverterLong.write(value.`folderCount`, buf)
        FfiConverterLong.write(value.`resourceCount`, buf)
        FfiConverterLong.write(value.`tagCount`, buf)
        FfiConverterLong.write(value.`noteTagCount`, buf)
    }
}

data class FfiSyncInfo(
    var `deleteRemoteCount`: Int,
    var `conflictNoteCount`: Int,
    var `otherConflictCount`: Int,
    var `uploadCount`: Int,
    var `deleteCount`: Int,
    var `pullCount`: Int,
    var `elapsedTime`: Double,
)

public object FfiConverterTypeFfiSyncInfo : FfiConverterRustBuffer<FfiSyncInfo> {
    override fun read(buf: ByteBuffer): FfiSyncInfo {
        return FfiSyncInfo(
            FfiConverterInt.read(buf),
            FfiConverterInt.read(buf),
            FfiConverterInt.read(buf),
            FfiConverterInt.read(buf),
            FfiConverterInt.read(buf),
            FfiConverterInt.read(buf),
            FfiConverterDouble.read(buf),
        )
    }

    override fun allocationSize(value: FfiSyncInfo) = (
        FfiConverterInt.allocationSize(value.`deleteRemoteCount`) +
            FfiConverterInt.allocationSize(value.`conflictNoteCount`) +
            FfiConverterInt.allocationSize(value.`otherConflictCount`) +
            FfiConverterInt.allocationSize(value.`uploadCount`) +
            FfiConverterInt.allocationSize(value.`deleteCount`) +
            FfiConverterInt.allocationSize(value.`pullCount`) +
            FfiConverterDouble.allocationSize(value.`elapsedTime`)
        )

    override fun write(value: FfiSyncInfo, buf: ByteBuffer) {
        FfiConverterInt.write(value.`deleteRemoteCount`, buf)
        FfiConverterInt.write(value.`conflictNoteCount`, buf)
        FfiConverterInt.write(value.`otherConflictCount`, buf)
        FfiConverterInt.write(value.`uploadCount`, buf)
        FfiConverterInt.write(value.`deleteCount`, buf)
        FfiConverterInt.write(value.`pullCount`, buf)
        FfiConverterDouble.write(value.`elapsedTime`, buf)
    }
}

sealed class MarkdownTagRange {
    data class Heading(
        val `level`: Int,
        val `start`: Int,
        val `end`: Int,
    ) : MarkdownTagRange()
    data class Emphasis(
        val `start`: Int,
        val `end`: Int,
    ) : MarkdownTagRange()
    data class Strong(
        val `start`: Int,
        val `end`: Int,
    ) : MarkdownTagRange()
    data class Strikethrough(
        val `start`: Int,
        val `end`: Int,
    ) : MarkdownTagRange()
    data class InlineCode(
        val `start`: Int,
        val `end`: Int,
    ) : MarkdownTagRange()
    data class MList(
        val `start`: Int,
        val `end`: Int,
        val `order`: Int,
        val `nestedLevel`: Int,
    ) : MarkdownTagRange()
    data class ListItem(
        val `start`: Int,
        val `end`: Int,
        val `nestedLevel`: Int,
        val `ordered`: Boolean,
    ) : MarkdownTagRange()
    data class Paragraph(
        val `start`: Int,
        val `end`: Int,
    ) : MarkdownTagRange()
    data class Link(
        val `start`: Int,
        val `end`: Int,
        val `urlOffset`: Int,
    ) : MarkdownTagRange()
    data class Image(
        val `start`: Int,
        val `end`: Int,
        val `urlOffset`: Int,
    ) : MarkdownTagRange()
    data class Rule(
        val `start`: Int,
        val `end`: Int,
    ) : MarkdownTagRange()
    data class BlockQuote(
        val `start`: Int,
        val `end`: Int,
    ) : MarkdownTagRange()
    data class TaskListMarker(
        val `start`: Int,
        val `end`: Int,
        val `isChecked`: Boolean,
    ) : MarkdownTagRange()
    data class CodeBlock(
        val `start`: Int,
        val `end`: Int,
    ) : MarkdownTagRange()
}

public object FfiConverterTypeMarkdownTagRange : FfiConverterRustBuffer<MarkdownTagRange> {
    override fun read(buf: ByteBuffer): MarkdownTagRange {
        return when (buf.getInt()) {
            1 -> MarkdownTagRange.Heading(
                FfiConverterInt.read(buf),
                FfiConverterInt.read(buf),
                FfiConverterInt.read(buf),
            )
            2 -> MarkdownTagRange.Emphasis(
                FfiConverterInt.read(buf),
                FfiConverterInt.read(buf),
            )
            3 -> MarkdownTagRange.Strong(
                FfiConverterInt.read(buf),
                FfiConverterInt.read(buf),
            )
            4 -> MarkdownTagRange.Strikethrough(
                FfiConverterInt.read(buf),
                FfiConverterInt.read(buf),
            )
            5 -> MarkdownTagRange.InlineCode(
                FfiConverterInt.read(buf),
                FfiConverterInt.read(buf),
            )
            6 -> MarkdownTagRange.MList(
                FfiConverterInt.read(buf),
                FfiConverterInt.read(buf),
                FfiConverterInt.read(buf),
                FfiConverterInt.read(buf),
            )
            7 -> MarkdownTagRange.ListItem(
                FfiConverterInt.read(buf),
                FfiConverterInt.read(buf),
                FfiConverterInt.read(buf),
                FfiConverterBoolean.read(buf),
            )
            8 -> MarkdownTagRange.Paragraph(
                FfiConverterInt.read(buf),
                FfiConverterInt.read(buf),
            )
            9 -> MarkdownTagRange.Link(
                FfiConverterInt.read(buf),
                FfiConverterInt.read(buf),
                FfiConverterInt.read(buf),
            )
            10 -> MarkdownTagRange.Image(
                FfiConverterInt.read(buf),
                FfiConverterInt.read(buf),
                FfiConverterInt.read(buf),
            )
            11 -> MarkdownTagRange.Rule(
                FfiConverterInt.read(buf),
                FfiConverterInt.read(buf),
            )
            12 -> MarkdownTagRange.BlockQuote(
                FfiConverterInt.read(buf),
                FfiConverterInt.read(buf),
            )
            13 -> MarkdownTagRange.TaskListMarker(
                FfiConverterInt.read(buf),
                FfiConverterInt.read(buf),
                FfiConverterBoolean.read(buf),
            )
            14 -> MarkdownTagRange.CodeBlock(
                FfiConverterInt.read(buf),
                FfiConverterInt.read(buf),
            )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: MarkdownTagRange) = when (value) {
        is MarkdownTagRange.Heading -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4 +
                    FfiConverterInt.allocationSize(value.`level`) +
                    FfiConverterInt.allocationSize(value.`start`) +
                    FfiConverterInt.allocationSize(value.`end`)
                )
        }
        is MarkdownTagRange.Emphasis -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4 +
                    FfiConverterInt.allocationSize(value.`start`) +
                    FfiConverterInt.allocationSize(value.`end`)
                )
        }
        is MarkdownTagRange.Strong -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4 +
                    FfiConverterInt.allocationSize(value.`start`) +
                    FfiConverterInt.allocationSize(value.`end`)
                )
        }
        is MarkdownTagRange.Strikethrough -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4 +
                    FfiConverterInt.allocationSize(value.`start`) +
                    FfiConverterInt.allocationSize(value.`end`)
                )
        }
        is MarkdownTagRange.InlineCode -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4 +
                    FfiConverterInt.allocationSize(value.`start`) +
                    FfiConverterInt.allocationSize(value.`end`)
                )
        }
        is MarkdownTagRange.MList -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4 +
                    FfiConverterInt.allocationSize(value.`start`) +
                    FfiConverterInt.allocationSize(value.`end`) +
                    FfiConverterInt.allocationSize(value.`order`) +
                    FfiConverterInt.allocationSize(value.`nestedLevel`)
                )
        }
        is MarkdownTagRange.ListItem -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4 +
                    FfiConverterInt.allocationSize(value.`start`) +
                    FfiConverterInt.allocationSize(value.`end`) +
                    FfiConverterInt.allocationSize(value.`nestedLevel`) +
                    FfiConverterBoolean.allocationSize(value.`ordered`)
                )
        }
        is MarkdownTagRange.Paragraph -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4 +
                    FfiConverterInt.allocationSize(value.`start`) +
                    FfiConverterInt.allocationSize(value.`end`)
                )
        }
        is MarkdownTagRange.Link -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4 +
                    FfiConverterInt.allocationSize(value.`start`) +
                    FfiConverterInt.allocationSize(value.`end`) +
                    FfiConverterInt.allocationSize(value.`urlOffset`)
                )
        }
        is MarkdownTagRange.Image -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4 +
                    FfiConverterInt.allocationSize(value.`start`) +
                    FfiConverterInt.allocationSize(value.`end`) +
                    FfiConverterInt.allocationSize(value.`urlOffset`)
                )
        }
        is MarkdownTagRange.Rule -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4 +
                    FfiConverterInt.allocationSize(value.`start`) +
                    FfiConverterInt.allocationSize(value.`end`)
                )
        }
        is MarkdownTagRange.BlockQuote -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4 +
                    FfiConverterInt.allocationSize(value.`start`) +
                    FfiConverterInt.allocationSize(value.`end`)
                )
        }
        is MarkdownTagRange.TaskListMarker -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4 +
                    FfiConverterInt.allocationSize(value.`start`) +
                    FfiConverterInt.allocationSize(value.`end`) +
                    FfiConverterBoolean.allocationSize(value.`isChecked`)
                )
        }
        is MarkdownTagRange.CodeBlock -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4 +
                    FfiConverterInt.allocationSize(value.`start`) +
                    FfiConverterInt.allocationSize(value.`end`)
                )
        }
    }

    override fun write(value: MarkdownTagRange, buf: ByteBuffer) {
        when (value) {
            is MarkdownTagRange.Heading -> {
                buf.putInt(1)
                FfiConverterInt.write(value.`level`, buf)
                FfiConverterInt.write(value.`start`, buf)
                FfiConverterInt.write(value.`end`, buf)
                Unit
            }
            is MarkdownTagRange.Emphasis -> {
                buf.putInt(2)
                FfiConverterInt.write(value.`start`, buf)
                FfiConverterInt.write(value.`end`, buf)
                Unit
            }
            is MarkdownTagRange.Strong -> {
                buf.putInt(3)
                FfiConverterInt.write(value.`start`, buf)
                FfiConverterInt.write(value.`end`, buf)
                Unit
            }
            is MarkdownTagRange.Strikethrough -> {
                buf.putInt(4)
                FfiConverterInt.write(value.`start`, buf)
                FfiConverterInt.write(value.`end`, buf)
                Unit
            }
            is MarkdownTagRange.InlineCode -> {
                buf.putInt(5)
                FfiConverterInt.write(value.`start`, buf)
                FfiConverterInt.write(value.`end`, buf)
                Unit
            }
            is MarkdownTagRange.MList -> {
                buf.putInt(6)
                FfiConverterInt.write(value.`start`, buf)
                FfiConverterInt.write(value.`end`, buf)
                FfiConverterInt.write(value.`order`, buf)
                FfiConverterInt.write(value.`nestedLevel`, buf)
                Unit
            }
            is MarkdownTagRange.ListItem -> {
                buf.putInt(7)
                FfiConverterInt.write(value.`start`, buf)
                FfiConverterInt.write(value.`end`, buf)
                FfiConverterInt.write(value.`nestedLevel`, buf)
                FfiConverterBoolean.write(value.`ordered`, buf)
                Unit
            }
            is MarkdownTagRange.Paragraph -> {
                buf.putInt(8)
                FfiConverterInt.write(value.`start`, buf)
                FfiConverterInt.write(value.`end`, buf)
                Unit
            }
            is MarkdownTagRange.Link -> {
                buf.putInt(9)
                FfiConverterInt.write(value.`start`, buf)
                FfiConverterInt.write(value.`end`, buf)
                FfiConverterInt.write(value.`urlOffset`, buf)
                Unit
            }
            is MarkdownTagRange.Image -> {
                buf.putInt(10)
                FfiConverterInt.write(value.`start`, buf)
                FfiConverterInt.write(value.`end`, buf)
                FfiConverterInt.write(value.`urlOffset`, buf)
                Unit
            }
            is MarkdownTagRange.Rule -> {
                buf.putInt(11)
                FfiConverterInt.write(value.`start`, buf)
                FfiConverterInt.write(value.`end`, buf)
                Unit
            }
            is MarkdownTagRange.BlockQuote -> {
                buf.putInt(12)
                FfiConverterInt.write(value.`start`, buf)
                FfiConverterInt.write(value.`end`, buf)
                Unit
            }
            is MarkdownTagRange.TaskListMarker -> {
                buf.putInt(13)
                FfiConverterInt.write(value.`start`, buf)
                FfiConverterInt.write(value.`end`, buf)
                FfiConverterBoolean.write(value.`isChecked`, buf)
                Unit
            }
            is MarkdownTagRange.CodeBlock -> {
                buf.putInt(14)
                FfiConverterInt.write(value.`start`, buf)
                FfiConverterInt.write(value.`end`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}

sealed class SyncConfig {
    data class JoplinServer(
        val `host`: String,
        val `email`: String,
        val `password`: String,
    ) : SyncConfig()
}

public object FfiConverterTypeSyncConfig : FfiConverterRustBuffer<SyncConfig> {
    override fun read(buf: ByteBuffer): SyncConfig {
        return when (buf.getInt()) {
            1 -> SyncConfig.JoplinServer(
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
            )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: SyncConfig) = when (value) {
        is SyncConfig.JoplinServer -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4 +
                    FfiConverterString.allocationSize(value.`host`) +
                    FfiConverterString.allocationSize(value.`email`) +
                    FfiConverterString.allocationSize(value.`password`)
                )
        }
    }

    override fun write(value: SyncConfig, buf: ByteBuffer) {
        when (value) {
            is SyncConfig.JoplinServer -> {
                buf.putInt(1)
                FfiConverterString.write(value.`host`, buf)
                FfiConverterString.write(value.`email`, buf)
                FfiConverterString.write(value.`password`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}

sealed class DatabaseException(message: String) : Exception(message) {
    // Each variant is a nested class
    // Flat enums carries a string error message, so no special implementation is necessary.
    class Open(message: String) : DatabaseException(message)
    class InvalidPath(message: String) : DatabaseException(message)
    class Update(message: String) : DatabaseException(message)
    class Migration(message: String) : DatabaseException(message)
    class Delete(message: String) : DatabaseException(message)
    class Select(message: String) : DatabaseException(message)
    class Insert(message: String) : DatabaseException(message)
    class Options(message: String) : DatabaseException(message)
    class Vacuum(message: String) : DatabaseException(message)
    class R2d2Exception(message: String) : DatabaseException(message)
    class Unknown(message: String) : DatabaseException(message)

    companion object ErrorHandler : CallStatusErrorHandler<DatabaseException> {
        override fun lift(error_buf: RustBuffer.ByValue): DatabaseException = FfiConverterTypeDatabaseError.lift(error_buf)
    }
}

public object FfiConverterTypeDatabaseError : FfiConverterRustBuffer<DatabaseException> {
    override fun read(buf: ByteBuffer): DatabaseException {
        return when (buf.getInt()) {
            1 -> DatabaseException.Open(FfiConverterString.read(buf))
            2 -> DatabaseException.InvalidPath(FfiConverterString.read(buf))
            3 -> DatabaseException.Update(FfiConverterString.read(buf))
            4 -> DatabaseException.Migration(FfiConverterString.read(buf))
            5 -> DatabaseException.Delete(FfiConverterString.read(buf))
            6 -> DatabaseException.Select(FfiConverterString.read(buf))
            7 -> DatabaseException.Insert(FfiConverterString.read(buf))
            8 -> DatabaseException.Options(FfiConverterString.read(buf))
            9 -> DatabaseException.Vacuum(FfiConverterString.read(buf))
            10 -> DatabaseException.R2d2Exception(FfiConverterString.read(buf))
            11 -> DatabaseException.Unknown(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: DatabaseException): Int {
        return 4
    }

    override fun write(value: DatabaseException, buf: ByteBuffer) {
        when (value) {
            is DatabaseException.Open -> {
                buf.putInt(1)
                Unit
            }
            is DatabaseException.InvalidPath -> {
                buf.putInt(2)
                Unit
            }
            is DatabaseException.Update -> {
                buf.putInt(3)
                Unit
            }
            is DatabaseException.Migration -> {
                buf.putInt(4)
                Unit
            }
            is DatabaseException.Delete -> {
                buf.putInt(5)
                Unit
            }
            is DatabaseException.Select -> {
                buf.putInt(6)
                Unit
            }
            is DatabaseException.Insert -> {
                buf.putInt(7)
                Unit
            }
            is DatabaseException.Options -> {
                buf.putInt(8)
                Unit
            }
            is DatabaseException.Vacuum -> {
                buf.putInt(9)
                Unit
            }
            is DatabaseException.R2d2Exception -> {
                buf.putInt(10)
                Unit
            }
            is DatabaseException.Unknown -> {
                buf.putInt(11)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}

sealed class SyncException(message: String) : Exception(message) {
    // Each variant is a nested class
    // Flat enums carries a string error message, so no special implementation is necessary.
    class IoException(message: String) : SyncException(message)
    class FileNotExists(message: String) : SyncException(message)
    class HandleConflictForDiffNote(message: String) : SyncException(message)
    class Unknown(message: String) : SyncException(message)
    class SerializeException(message: String) : SyncException(message)
    class ApiException(message: String) : SyncException(message)
    class Misconfiguration(message: String) : SyncException(message)
    class JoinException(message: String) : SyncException(message)
    class DatabaseException(message: String) : SyncException(message)
    class DeserializeException(message: String) : SyncException(message)
    class SerdeJsonException(message: String) : SyncException(message)
    class SyncConfigNotExists(message: String) : SyncException(message)
    class NotSupportedSyncTargetInfo(message: String) : SyncException(message)

    companion object ErrorHandler : CallStatusErrorHandler<SyncException> {
        override fun lift(error_buf: RustBuffer.ByValue): SyncException = FfiConverterTypeSyncError.lift(error_buf)
    }
}

public object FfiConverterTypeSyncError : FfiConverterRustBuffer<SyncException> {
    override fun read(buf: ByteBuffer): SyncException {
        return when (buf.getInt()) {
            1 -> SyncException.IoException(FfiConverterString.read(buf))
            2 -> SyncException.FileNotExists(FfiConverterString.read(buf))
            3 -> SyncException.HandleConflictForDiffNote(FfiConverterString.read(buf))
            4 -> SyncException.Unknown(FfiConverterString.read(buf))
            5 -> SyncException.SerializeException(FfiConverterString.read(buf))
            6 -> SyncException.ApiException(FfiConverterString.read(buf))
            7 -> SyncException.Misconfiguration(FfiConverterString.read(buf))
            8 -> SyncException.JoinException(FfiConverterString.read(buf))
            9 -> SyncException.DatabaseException(FfiConverterString.read(buf))
            10 -> SyncException.DeserializeException(FfiConverterString.read(buf))
            11 -> SyncException.SerdeJsonException(FfiConverterString.read(buf))
            12 -> SyncException.SyncConfigNotExists(FfiConverterString.read(buf))
            13 -> SyncException.NotSupportedSyncTargetInfo(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: SyncException): Int {
        return 4
    }

    override fun write(value: SyncException, buf: ByteBuffer) {
        when (value) {
            is SyncException.IoException -> {
                buf.putInt(1)
                Unit
            }
            is SyncException.FileNotExists -> {
                buf.putInt(2)
                Unit
            }
            is SyncException.HandleConflictForDiffNote -> {
                buf.putInt(3)
                Unit
            }
            is SyncException.Unknown -> {
                buf.putInt(4)
                Unit
            }
            is SyncException.SerializeException -> {
                buf.putInt(5)
                Unit
            }
            is SyncException.ApiException -> {
                buf.putInt(6)
                Unit
            }
            is SyncException.Misconfiguration -> {
                buf.putInt(7)
                Unit
            }
            is SyncException.JoinException -> {
                buf.putInt(8)
                Unit
            }
            is SyncException.DatabaseException -> {
                buf.putInt(9)
                Unit
            }
            is SyncException.DeserializeException -> {
                buf.putInt(10)
                Unit
            }
            is SyncException.SerdeJsonException -> {
                buf.putInt(11)
                Unit
            }
            is SyncException.SyncConfigNotExists -> {
                buf.putInt(12)
                Unit
            }
            is SyncException.NotSupportedSyncTargetInfo -> {
                buf.putInt(13)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}

public object FfiConverterOptionalString : FfiConverterRustBuffer<String?> {
    override fun read(buf: ByteBuffer): String? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterString.read(buf)
    }

    override fun allocationSize(value: String?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterString.allocationSize(value)
        }
    }

    override fun write(value: String?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterString.write(value, buf)
        }
    }
}

public object FfiConverterOptionalTypeSyncConfig : FfiConverterRustBuffer<SyncConfig?> {
    override fun read(buf: ByteBuffer): SyncConfig? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeSyncConfig.read(buf)
    }

    override fun allocationSize(value: SyncConfig?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeSyncConfig.allocationSize(value)
        }
    }

    override fun write(value: SyncConfig?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeSyncConfig.write(value, buf)
        }
    }
}

public object FfiConverterSequenceTypeFfiAbbrNote : FfiConverterRustBuffer<List<FfiAbbrNote>> {
    override fun read(buf: ByteBuffer): List<FfiAbbrNote> {
        val len = buf.getInt()
        return List<FfiAbbrNote>(len) {
            FfiConverterTypeFfiAbbrNote.read(buf)
        }
    }

    override fun allocationSize(value: List<FfiAbbrNote>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeFfiAbbrNote.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<FfiAbbrNote>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeFfiAbbrNote.write(it, buf)
        }
    }
}

public object FfiConverterSequenceTypeFfiFolder : FfiConverterRustBuffer<List<FfiFolder>> {
    override fun read(buf: ByteBuffer): List<FfiFolder> {
        val len = buf.getInt()
        return List<FfiFolder>(len) {
            FfiConverterTypeFfiFolder.read(buf)
        }
    }

    override fun allocationSize(value: List<FfiFolder>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeFfiFolder.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<FfiFolder>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeFfiFolder.write(it, buf)
        }
    }
}

public object FfiConverterSequenceTypeFfiSearchNote : FfiConverterRustBuffer<List<FfiSearchNote>> {
    override fun read(buf: ByteBuffer): List<FfiSearchNote> {
        val len = buf.getInt()
        return List<FfiSearchNote>(len) {
            FfiConverterTypeFfiSearchNote.read(buf)
        }
    }

    override fun allocationSize(value: List<FfiSearchNote>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeFfiSearchNote.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<FfiSearchNote>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeFfiSearchNote.write(it, buf)
        }
    }
}

public object FfiConverterSequenceTypeMarkdownTagRange : FfiConverterRustBuffer<List<MarkdownTagRange>> {
    override fun read(buf: ByteBuffer): List<MarkdownTagRange> {
        val len = buf.getInt()
        return List<MarkdownTagRange>(len) {
            FfiConverterTypeMarkdownTagRange.read(buf)
        }
    }

    override fun allocationSize(value: List<MarkdownTagRange>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeMarkdownTagRange.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<MarkdownTagRange>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeMarkdownTagRange.write(it, buf)
        }
    }
}

fun `parseMarkdown`(`text`: String): List<MarkdownTagRange> {
    return FfiConverterSequenceTypeMarkdownTagRange.lift(
        rustCall() { _status ->
            _UniFFILib.INSTANCE.ruslin_894c_parse_markdown(FfiConverterString.lower(`text`), _status)
        },
    )
}
